/// Vec的两种创建方式

fn main() {
    /* 创建动态数组 */
    // Vec::new
    // 使用 Vec::new 创建动态数组是最 rusty 的方式，它调用了 Vec 中的 new 关联函数：
    let v: Vec<i32> = Vec::new();
    // 这里，v 被显式地声明了类型 Vec<i32>，
    // 这是因为 Rust 编译器无法从 Vec::new() 中得到任何关于类型的暗示信息，
    // 因此也无法推导出 v 的具体类型，但是当你向里面增加一个元素后，一切又不同了：

    let mut v = Vec::new();
    v.push(1);
    // 此时，v 就无需手动声明类型，因为编译器通过 v.push(1)，推测出 v 中的元素类型是 i32，因此推导出 v 的类型是 Vec<i32>。

    // vec![]
    // 还可以使用宏 vec! 来创建数组，与 Vec::new 有所不同，前者能在创建同时给予初始化值：

    let v2 = vec![1, 2, 3];
    // 同样，此处的 v2 也无需标注类型，编译器只需检查它内部的元素即可自动推导出 v 的类型是 Vec<i32> （Rust 中，整数默认类型是 i32，在数值类型中有详细介绍）。


    
    /* 更新 Vector */
    // 向数组尾部添加元素，可以使用 push 方法：
    let mut v = Vec::new();
    v.push(1);
    // 与其它类型一样，必须将 v 声明为 mut 后，才能进行修改。
}
